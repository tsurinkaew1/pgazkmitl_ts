function pgaz_maingui
    targetClassT1 = 'class_handle_toolbar.m';
    targetClassT2 = 'class_settings.m';
    targetClassM1 = 'class_pgaz_pf.m';
    MATLAB = pwd; 
    searchResultT1 = dir(fullfile(MATLAB, '**', targetClassT1));
    searchResultT2 = dir(fullfile(MATLAB, '**', targetClassT2));
    searchResultM1 = dir(fullfile(MATLAB, '**', targetClassM1));
    if isempty(searchResultT1)
        error(['File "', targetClassT1, '" not found in the project directory.']);
    end
    classFolderT1 = searchResultT1(1).folder;
    disp(['Found Class file in folder: ', classFolderT1]);
    addpath(classFolderT1);
    disp(['Folder added to path: ', classFolderT1]);
    if isempty(searchResultT2)
        error(['File "', targetClassT2, '" not found in the project directory.']);
    end
    classFolderT2 = searchResultT2(1).folder;
    disp(['Found Class file in folder: ', classFolderT2]);
    addpath(classFolderT2);
    disp(['Folder added to path: ', classFolderT2]);
    if isempty(searchResultM1)
        error(['File "', targetClassM1, '" not found in the project directory.']);
    end
    classFolderM1 = searchResultM1(1).folder;
    disp(['Found Class file in folder: ', classFolderM1]);
    addpath(classFolderM1);
    disp(['Folder added to path: ', classFolderM1]);

    screenSize = get(0, 'ScreenSize');
    guiWidth = 945;
    guiHeight = 510;
    guiX = (screenSize(3) - guiWidth) / 2;
    guiY = (screenSize(4) - guiHeight) / 2;

    fig = figure('Name', 'PGAz version 1.0.0', ...
                 'NumberTitle', 'off', ...
                 'MenuBar', 'none', ...
                 'Resize', 'off', ...
                 'Position', [guiX, guiY, guiWidth, guiHeight], ...
                 'Color', [1, 1, 1], ...
                 'ResizeFcn', @(src, event) resizeGUI(src));

    menuFile = uimenu(fig, 'Text', 'File');
    uimenu(menuFile, 'Text', 'New', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_newfile(), 'Accelerator', 'N');
    menuOpen = uimenu(menuFile, 'Text', 'Open');
    uimenu(menuOpen, 'Text', 'Data File', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_datafile(), 'Accelerator', 'D');
    uimenu(menuOpen, 'Text', 'Saved System', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_saved_system(), 'Accelerator', 'Y');
    menuSave = uimenu(menuFile, 'Text', 'Save');
    uimenu(menuSave, 'Text', 'Current System', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_current_system(), 'Accelerator', 'S');
    % uimenu(menuSave, 'Text', 'Settings', 'Callback', @(src, event) handleSettings());
    uimenu(menuFile, 'Text', 'Discard Data File', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_discard_datafile(), 'Separator', 'on');
    uimenu(menuFile, 'Text', 'Clear workspace', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_clear_workspace());
    uimenu(menuFile, 'Text', 'Close', 'Callback', @(src, event) class_handle_toolbar.pgaz_handle_close(), 'Separator', 'on', 'Accelerator', 'X');

    menuEdit = uimenu(fig, 'Text', 'Edit');
    uimenu(menuEdit, 'Text', 'General Settings', 'Callback', @(src, event) class_settings.pgaz_general_settings(), 'Accelerator', 'G');
    % uimenu(menuEdit, 'Text', 'CPF Settings', 'Callback', @(src, event) class_settings.pgaz_cpf_settings());
    % uimenu(menuEdit, 'Text', 'OPF Settings', 'Callback', @(src, event) class_settings.pgaz_opf_settings());

    % menuRun = uimenu(fig, 'Text', 'Run');
    % uimenu(menuRun, 'Text', 'Power Flow', 'Callback', @(src, event) class_pgaz_pf.pgaz_pf(msggph,dowstatus), 'Accelerator', 'P');
    % uimenu(menuRun, 'Text', 'Continuation Power Flow', 'Callback', @(src, event) handleContinuationPowerFlow(), 'Accelerator', 'C');
    % uimenu(menuRun, 'Text', 'Optimal Power Flow', 'Callback', @(src, event) handleOptimalPowerFlow(), 'Accelerator', 'O');

    menuView = uimenu(fig, 'Text', 'View');
    uimenu(menuView, 'Text', 'Static Reports', 'Callback', @(src, event) pgaz_static_report(), 'Accelerator', 'V');
    uimenu(menuView, 'Text', 'Export Results', 'Callback', @(src, event) handleExportResults(), 'Separator', 'on', 'Accelerator', 'E');

    menuHelp = uimenu(fig, 'Text', 'Help');
    uimenu(menuHelp, 'Text', 'About PGAz', 'Callback', @(src, event) handleAboutPgaz());
    uimenu(menuHelp, 'Text', 'User Manual', 'Callback', @(src, event) pgaz_guide());
    menuFeedback = uimenu(menuHelp, 'Text', 'Feedback', 'Separator', 'on');
    uimenu(menuFeedback, 'Text', 'tossaporn.su@kmitl.ac.th', 'Callback', @(src, event) handletossaporn());
    uimenu(menuFeedback, 'Text', '64010879@kmitl.ac.th', 'Callback', @(src, event) handlesorasak());
    
    msgTool = axes('Parent', fig, ...
                     'Units', 'pixels', ...
                     'Position', [1.5, 482, 943.2, 30], ...
                     'Color', [0.95, 0.95, 0.95], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'ToolAxes');
   
    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_saved_systems.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_saved_system(fig, imagePath, [20, 486, 20, 20], ...
                          'Open Saved System', 'btnOpenSystem', ...
                          @(src, event) class_handle_toolbar.pgaz_handle_current_system());

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_data_file.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_data_file(fig, imagePath, [50, 486, 20, 20], ...
                         'Open Data File', 'btnOpenDataFile', ...
                          @(src, event) class_handle_toolbar.pgaz_handle_datafile);

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_discard_data.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_discard_data(fig, imagePath, [680, 486, 20, 20], ...
                         'Discard Data File', 'btndiscarddata', ...
                          @(src, event) class_handle_toolbar.pgaz_handle_discard_datafile);

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_svae_current_systems.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_save_current_systems(fig, imagePath, [710, 486, 20, 20], ...
                         'Save Current System', 'btnsavecurrentsystems', ...
                          @(src, event) class_handle_toolbar.pgaz_handle_current_system);

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_static_report.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_save_current_systems(fig, imagePath, [740, 486, 20, 20], ...
                         'Static Reports', 'btnsavecurrentsystems', ...
                          @(src, event) pgaz_static_report());

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_export_result.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_export_results(fig, imagePath, [770, 486, 20, 20], ...
                         'Export Results', 'btnexportresults', ...
                          @(src, event) handleExportResults());

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_user_manual.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_user_manual(fig, imagePath, [880, 486, 20, 20], ...
                         'User Manual', 'btnusermanual', ...
                          @(src, event) pgaz_guide());

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_about.jpg';
    imagePath = fullfile(imageFolder, imageFile);
    pgaz_btn_about_pgaz(fig, imagePath, [910, 486, 20, 20], ...
                         'About PGAz', 'btnabout', ...
                          @(src, event) handleAboutPgaz());

    btnClose = uicontrol('Parent', fig, ...
                     'Style', 'pushbutton', ...
                     'String', 'Close', ...
                     'FontName', 'Arial', ...
                     'FontSize', 8, ...
                     'FontWeight', 'normal', ...
                     'BackgroundColor', [0.98, 0.98, 0.98], ...
                     'Position', [882, 5, 60, 20], ...
                     'Callback', @(src, event) close(fig));

    DataFileBox = uicontrol('Parent', fig, ...
                         'Style', 'edit', ...
                         'Units', 'pixels', ...
                         'Tag', 'DataFileBox', ...
                         'Position', [80, 486, 590, 20], ... 
                         'BackgroundColor', [1, 1, 1], ...
                         'ForegroundColor', [0, 0, 0], ...
                         'FontSize', 9, ...
                         'FontName', 'Segoe UI', ...
                         'HorizontalAlignment', 'left', ...
                         'Max', 1, ... 
                         'Min', 0, ...
                         'Enable', 'inactive', ...
                         'String', ''); 
    if evalin('base', 'exist(''LocationImportData'', ''var'')')
        LocationImportData = evalin('base', 'LocationImportData'); 
        set(DataFileBox, 'String', LocationImportData); 
    else
        set(DataFileBox, 'String', ''); 
    end
    
    % msggph = axes('Parent', fig, ...
    %                  'Units', 'pixels', ...
    %                  'Position', [40, 295, 280, 150], ...
    %                  'Color', [1, 0, 0], ...
    %                  'XColor', 'none', 'YColor', 'none', ...
    %                  'XTick', [], 'YTick', [], ...
    %                  'Tag', 'msggph');
    msggph = axes('Parent', fig, ...
                     'Units', 'normalized', ...
                     'Position', [0.03, 0.57, 0.31, 0.3], ...
                     'Color', [0.98, 0.98, 0.98], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'msggph');

    imageFolder = fullfile(pwd, 'pgaz_images');
    imageFile = 'pgaz_logo.png';
    imagePath = fullfile(imageFolder, imageFile);
    
    if exist(imagePath, 'file')
        % สร้าง axes โดยใช้ units เป็น normalized เพื่อให้ปรับตามขนาดหน้าต่าง
        axLogo = axes('Parent', fig, ...
                      'Units', 'normalized', ...
                      'Position', [0.02, 0.08, 0.17, 0.15], ... % [left, bottom, width, height]
                      'Tag', 'LogoAxes');
        
        % อ่านและแสดงภาพ
        img = imread(imagePath);
        imshow(img, 'Parent', axLogo, 'InitialMagnification', 'fit'); % ปรับขนาดอัตโนมัติ
    else
        warning('The image file "%s" was not found in the folder "%s".', ...
                imageFile, imageFolder);
    end

        % สร้างแกนพื้นหลัง (Background axis)
    dowstatusbac = axes('Parent', fig, ...
                         'Units', 'normalized', ...
                         'Position', [0.842, 0.007, 0.0865, 0.04], ...
                         'Color', [0, 0, 0], ...
                         'XColor', 'none', 'YColor', 'none', ...
                         'XTick', [], 'YTick', [], ...
                         'Tag', 'dowstatusbac');
    
    % สร้างแกนสถานะ (Foreground axis)
    dowstatus = axes('Parent', fig, ...
                     'Units', 'normalized', ...
                     'Position', [0.843, 0.009, 0.084512, 0.036], ...
                     'Color', [1, 0, 0], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'dowstatus');

    % ใช้ uistack เพื่อย้าย dowstatus มาอยู่ด้านบน
    uistack(dowstatus, 'top');

    
    msgStatus = axes('Parent', fig, ...
                     'Units', 'pixels', ...
                     'Position', [5, 5, 788, 20], ...
                     'Color', [0.95, 0.95, 0.95], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'StatusAxes');
    text(0.01, 0.5, ' @ Copyright (C) 2024 Power Grid Analyzer Team.', ...
         'FontName', 'Arial', ...
         'FontWeight', 'normal', ...
         'FontSize', 8, ...
         'HorizontalAlignment', 'left', ...
         'VerticalAlignment', 'middle', ...
         'Parent', msgStatus, ...
         'Color', [0, 0, 0]);

    msgBuild = axes('Parent', fig, ...
                     'Units', 'pixels', ...
                     'Position', [200, 130, 745, 25], ...
                     'Color', [0, 0, 0.5], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'BuildAxes');
    text(0.01, 0.5, ' Build Message', ...
         'FontName', 'Arial', ...
         'FontWeight', 'bold', ...
         'FontSize', 9, ...
         'HorizontalAlignment', 'left', ...
         'VerticalAlignment', 'middle', ...
         'Parent', msgBuild, ...
         'Color', [1, 1, 1]);

    BuildBox = uicontrol('Parent', fig, ...
                         'Style', 'edit', ...
                         'Units', 'pixels', ...
                         'Tag', 'BuildBox',...
                         'Position', [200, 28, 745, 100], ... 
                         'BackgroundColor', [1, 1, 1], ... 
                         'ForegroundColor', [0, 0, 0], ... 
                         'FontSize', 8, ...
                         'FontName', 'Arial', ...
                         'HorizontalAlignment', 'left', ... 
                         'Max', 2, ... 
                         'Min', 0, ...
                         'Enable', 'inactive', ... 
                         'String', ''); 

    if evalin('base', 'exist(''OperationSuccess'', ''var'')')
        OperationSuccess = evalin('base', 'OperationSuccess'); 
        set(BuildBox, 'String', OperationSuccess); 
    else
        set(BuildBox, 'String', ''); 
    end

    NetSolBox = uicontrol('Parent', fig, ...
                         'Style', 'edit', ...
                         'Units', 'pixels', ...
                         'Tag', 'NetSolBox',...
                         'Position', [345, 157, 600, 297], ... 
                         'BackgroundColor', [1, 1, 1], ... 
                         'ForegroundColor', [0, 0, 0], ... 
                         'FontSize', 8, ...
                         'FontName', 'Arial', ...
                         'HorizontalAlignment', 'left', ... 
                         'Max', 2, ... 
                         'Min', 0, ...
                         'Enable', 'inactive', ... 
                         'String', ''); 
    if evalin('base', 'exist(''PowerFlowReportcomman'', ''var'')')
        PowerFlowReportcomman = evalin('base', 'PowerFlowReportcomman'); 
        set(NetSolBox, 'String', PowerFlowReportcomman); 
    else
        set(NetSolBox, 'String', ''); 
    end
    
    msgNameNetsol = axes('Parent', fig, ...
                     'Units', 'pixels', ...
                     'Position', [345, 455, 600, 25], ...
                     'Color', [0, 0, 0.5], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'NameNetsolAxes');
    text(0.01, 0.5, ' Network and Solution Statistic', ...
         'FontName', 'Arial', ...
         'FontWeight', 'bold', ...
         'FontSize', 9, ...
         'HorizontalAlignment', 'left', ...
         'VerticalAlignment', 'middle', ...
         'Parent', msgNameNetsol, ...
         'Color', [1, 1, 1]);

    msgconver = axes('Parent', fig, ...
                     'Units', 'pixels', ...
                     'Position', [12, 455, 322, 25], ...
                     'Color', [1, 1, 1], ...
                     'XColor', 'none', 'YColor', 'none', ...
                     'XTick', [], 'YTick', [], ...
                     'Tag', 'msgconver');
    text(0.5, 0.5, 'Convergence of Accuracy', ...
         'FontName', 'Arial', ...
         'FontWeight', 'bold', ...
         'FontSize', 9, ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment', 'middle', ...
         'Parent', msgconver, ...
         'Color', [0, 0, 0.5]);

    btnpowerflow = uicontrol('Parent', fig, ...
                          'Style', 'pushbutton', ...
                          'String', 'Power Flow', ...
                          'FontName', 'Arial', ...
                          'FontSize', 8, ...
                          'FontWeight', 'normal', ...
                          'BackgroundColor', [0.98, 0.98, 0.98], ...
                          'Position', [75, 231, 200, 25], ...
                          'Callback', @(src, event) class_pgaz_pf.pgaz_pf(msggph,dowstatus));

    % btnoptimalPF = uicontrol('Parent', fig, ...
    %                           'Style', 'pushbutton', ...
    %                           'String', 'Optimal PF', ...
    %                           'FontName', 'Arial', ...
    %                           'FontSize', 8, ...
    %                           'FontWeight', 'normal', ...
    %                           'BackgroundColor', [0.98, 0.98, 0.98], ...
    %                           'Position', [12, 198, 102, 25], ...
    %                           'Callback', @(src, event) disp('Submit button clicked!'));
    % 
    % btncontinuationlPF = uicontrol('Parent', fig, ...
    %                                   'Style', 'pushbutton', ...
    %                                   'String', 'Continuation PF', ...
    %                                   'FontName', 'Arial', ...
    %                                   'FontSize', 8, ...
    %                                   'FontWeight', 'normal', ...
    %                                   'BackgroundColor', [0.98, 0.98, 0.98], ...
    %                                   'Position', [12, 165, 102, 25], ...
    %                                   'Callback', @(src, event) disp('Submit button clicked!'));

    btnplot = uicontrol('Parent', fig, ...
                                      'Style', 'pushbutton', ...
                                      'String', 'Static Report', ...
                                      'FontName', 'Arial', ...
                                      'FontSize', 8, ...
                                      'FontWeight', 'normal', ...
                                      'BackgroundColor', [0.98, 0.98, 0.98], ...
                                      'Position', [75, 198, 200, 25], ...
                                      'Callback', @(src, event) pgaz_static_report());

    btnsettings = uicontrol('Parent', fig, ...
                          'Style', 'pushbutton', ...
                          'String', 'Settings', ...
                          'FontName', 'Arial', ...
                          'FontSize', 8, ...
                          'FontWeight', 'normal', ...
                          'BackgroundColor', [0.98, 0.98, 0.98], ...
                          'Position', [75, 165, 200, 25], ...
                          'Callback', @(src, event) class_settings.pgaz_general_settings());
    
    % btnTD = uicontrol('Parent', fig, ...
    %                           'Style', 'pushbutton', ...
    %                           'String', 'Time Domain Simulation', ...
    %                           'FontName', 'Arial', ...
    %                           'FontSize', 8, ...
    %                           'FontWeight', 'normal', ...
    %                           'BackgroundColor', [0.98, 0.98, 0.98], ...
    %                           'Position', [122, 198, 212, 25], ...
    %                           'Callback', @(src, event) disp('Submit button clicked!'));
    % 
    % btnSSSA = uicontrol('Parent', fig, ...
    %                           'Style', 'pushbutton', ...
    %                           'String', 'Small Signal Stability Analysis', ...
    %                           'FontName', 'Arial', ...
    %                           'FontSize', 8, ...
    %                           'FontWeight', 'normal', ...
    %                           'BackgroundColor', [0.98, 0.98, 0.98], ...
    %                           'Position', [122, 231, 212, 25], ...
    %                           'Callback', @(src, event) disp('Submit button clicked!'));

   set(fig, 'WindowButtonMotionFcn', @(src, event) checkMouseOverMultiple(fig, ...
    {btnClose, btnpowerflow,  btnplot, btnsettings}));

end

function resizeGUI(fig)
    figSize = get(fig, 'Position');
    widthScale = figSize(3) / 945;
    heightScale = figSize(4) / 510;

    btnClose = findobj(fig, 'String', 'Close');
    originalBtnPos = [882, 5, 60, 20];
    set(btnClose, 'Position', [originalBtnPos(1) * widthScale, ...
                               originalBtnPos(2) * heightScale, ...
                               originalBtnPos(3) * widthScale, ...
                               originalBtnPos(4) * heightScale]);

    
    btnpowerflow = findobj(fig, 'String', 'Power Flow');
    originalBtnPos = [75, 231, 200, 25];
    set(btnpowerflow, 'Position', [originalBtnPos(1) * widthScale, ...
                               originalBtnPos(2) * heightScale, ...
                               originalBtnPos(3) * widthScale, ...
                               originalBtnPos(4) * heightScale]);


    btnplot = findobj(fig, 'String', 'Static Report');
    originalBtnPos = [75, 198, 200, 25];
    set(btnplot, 'Position', [originalBtnPos(1) * widthScale, ...
                               originalBtnPos(2) * heightScale, ...
                               originalBtnPos(3) * widthScale, ...
                               originalBtnPos(4) * heightScale]);

    btnsettings = findobj(fig, 'String', 'Settings');
    originalBtnPos = [75, 165, 200, 25];
    set(btnsettings, 'Position', [originalBtnPos(1) * widthScale, ...
                               originalBtnPos(2) * heightScale, ...
                               originalBtnPos(3) * widthScale, ...
                               originalBtnPos(4) * heightScale]);

  
    axLogo = findobj(fig, 'Type', 'axes', 'Tag', 'LogoAxes');
    if ~isempty(axLogo)
        originalAxPos = [20, 45, 300, 120];
        set(axLogo, 'Position', [originalAxPos(1) * widthScale, ...
                                 originalAxPos(2) * heightScale, ...
                                 originalAxPos(3) * widthScale, ...
                                 originalAxPos(4) * heightScale]);

        imageFolder = fullfile(pwd, 'pgaz_images');
        imageFile = 'pgaz_logo.png';
        imagePath = fullfile(imageFolder, imageFile);
        if exist(imagePath, 'file')
            img = imread(imagePath);
            imshow(img, 'Parent', axLogo);
        end
    end

    msgStatus = findobj(fig, 'Type', 'axes', 'Tag', 'StatusAxes');
    if ~isempty(msgStatus)
        originalMsgPos = [5, 5, 788, 20];
        set(msgStatus, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    
    msggph = findobj(fig, 'Type', 'axes', 'Tag', 'msggph');
    if ~isempty(msggph)
        originalMsgPos = [40, 295, 280, 150];
        set(msggph, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    msgconver = findobj(fig, 'Type', 'axes', 'Tag', 'msgconver');
    if ~isempty(msgconver)
        originalMsgPos = [12, 455, 322, 25];
        set(msgconver, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    msgBuild = findobj(fig, 'Type', 'axes', 'Tag', 'BuildAxes');
    if ~isempty(msgBuild)
        originalMsgPos = [200, 130, 745, 25];
        set(msgBuild, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    BuildBox = findobj(fig, 'Type', 'uicontrol', 'Tag', 'BuildBox');
    if ~isempty(BuildBox)
        originalMsgPos = [200, 28, 745, 100];
        set(BuildBox, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    msgTool = findobj(fig, 'Type', 'axes', 'Tag', 'ToolAxes');
    if ~isempty(msgTool)
        originalMsgPos = [1.5, 482, 943.2, 30];
        set(msgTool, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    msgNameNetsol = findobj(fig, 'Type', 'axes', 'Tag', 'NameNetsolAxes');
    if ~isempty(msgNameNetsol)
        originalMsgPos = [345, 455, 600, 25];
        set(msgNameNetsol, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end
    
    NetSolBox = findobj(fig, 'Type', 'uicontrol', 'Tag', 'NetSolBox');
    if ~isempty(NetSolBox)
        originalMsgPos = [345, 157, 600, 297];
        set(NetSolBox, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btnOpenSystem = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btnOpenSystem');
    if ~isempty(btnOpenSystem)
        originalMsgPos = [20, 486, 20, 20];
        set(btnOpenSystem, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btnOpenDataFile = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btnOpenDataFile');
    if ~isempty(btnOpenDataFile)
        originalMsgPos = [50, 486, 20, 20];
        set(btnOpenDataFile, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    DataFileBox = findobj(fig, 'Type', 'uicontrol', 'Tag', 'DataFileBox');
    if ~isempty(DataFileBox)
        originalMsgPos = [80, 486, 590, 20];
        set(DataFileBox, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btndiscarddata = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btndiscarddata');
    if ~isempty(btndiscarddata)
        originalMsgPos = [680, 486, 20, 20];
        set(btndiscarddata, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btnsavecurrentsystems = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btnsavecurrentsystems');
    if ~isempty(btnsavecurrentsystems)
        originalMsgPos = [710, 486, 20, 20];
        set(btnsavecurrentsystems, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btnexportresults = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btnexportresults');
    if ~isempty(btnexportresults)
        originalMsgPos = [740, 486, 20, 20];
        set(btnexportresults, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btnusermanual = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btnusermanual');
    if ~isempty(btnusermanual)
        originalMsgPos = [880, 486, 20, 20];
        set(btnusermanual, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

    btnabout = findobj(fig, 'Type', 'uicontrol', 'Tag', 'btnabout');
    if ~isempty(btnabout)
        originalMsgPos = [910, 486, 20, 20];
        set(btnabout, 'Position', [originalMsgPos(1) * widthScale, ...
                                    originalMsgPos(2) * heightScale, ...
                                    originalMsgPos(3) * widthScale, ...
                                    originalMsgPos(4) * heightScale]);
    end

end

function checkMouseOverMultiple(fig, buttons)
    mousePos = get(fig, 'CurrentPoint');
    for i = 1:length(buttons)
        btn = buttons{i};
        btnPos = getpixelposition(btn);
        
        if mousePos(1) >= btnPos(1) && mousePos(1) <= btnPos(1) + btnPos(3) && ...
           mousePos(2) >= btnPos(2) && mousePos(2) <= btnPos(2) + btnPos(4)
            if btn == buttons{1} % btnClose
                set(btn, 'BackgroundColor', [1, 0, 0]); % พื้นหลังสีแดง
                set(btn, 'ForegroundColor', [1, 1, 1]); % ตัวอักษรขาว
            else % ปุ่มอื่นๆ
                set(btn, 'BackgroundColor', [0, 0, 0.5]); % พื้นหลังสีฟ้าเข้ม
                set(btn, 'ForegroundColor', [1, 1, 1]); % ตัวอักษรขาว
            end
        else
            set(btn, 'BackgroundColor', [0.98, 0.98, 0.98]); % พื้นหลังปกติ
            set(btn, 'ForegroundColor', [0, 0, 0]); % ตัวอักษรดำ
        end
    end
end


function handleExportResults()
 % ตรวจสอบ methodIdx ใน workspace
    try
        % ดึงค่า methodIdx จาก workspace
        methodIdx = evalin('base', 'methodIdx');
        
        % ตรวจสอบค่าของ methodIdx
        if methodIdx == 1
            % กรณี methodIdx == 1
            nroutputtxt = evalc('pgaz_pf_nr()');  % เก็บผลลัพธ์จากฟังก์ชัน
            assignin('base', 'Export', nroutputtxt);  % บันทึกตัวแปร 'Export' ลงใน Workspace
            pgaz_export();  % เรียกฟังก์ชัน pgaz_export
        elseif methodIdx == 2
            % กรณี methodIdx == 2
            gsoutputtxt = evalc('pgaz_pf_gs()');  % เก็บผลลัพธ์จากฟังก์ชัน
            assignin('base', 'Export', gsoutputtxt);  % บันทึกตัวแปร 'Export' ลงใน Workspace
            pgaz_export();  % เรียกฟังก์ชัน pgaz_export
        elseif methodIdx == 3
            % กรณี methodIdx == 3
            fdoutputtxt = evalc('pgaz_pf_fd()');  % เก็บผลลัพธ์จากฟังก์ชัน
            assignin('base', 'Export', fdoutputtxt);  % บันทึกตัวแปร 'Export' ลงใน Workspace
            pgaz_export();  % เรียกฟังก์ชัน pgaz_export
        elseif methodIdx == 4
            % กรณี methodIdx == 3
            iwoutputtxt = evalc('pgaz_pf_iw()');  % เก็บผลลัพธ์จากฟังก์ชัน
            assignin('base', 'Export', iwoutputtxt);  % บันทึกตัวแปร 'Export' ลงใน Workspace
            pgaz_export();  % เรียกฟังก์ชัน pgaz_export
        else
            % กรณี methodIdx มีค่าอื่นที่ไม่ใช่ 1, 2, หรือ 3
            disp('error !');
        end
    catch ME
        % จัดการข้อผิดพลาดในกรณี methodIdx ไม่มีอยู่ใน workspace
        disp('Error: methodIdx not found in workspace or invalid.');
        disp(ME.message);
    end
end

function handleAboutPgaz()
    % Generate the information string
    info = sprintf(['< P G A z >\n', ...
                    'Copyright (C) 2024 Power Grid Analyzer Team\n', ...
                    'Version 1.0.0\n', ...
                    'July 1, 2024\n', ...
                    'tossaporn.su@kmitl.ac.th\n', ...
                    '64010879@kmitl.ac.th\n']);
    
    % Create a message box to display the information
    msgbox(info, 'About PGAz', 'help');
end

function pgaz_guide()
    % Generate the information string
    info = sprintf(['PGAz v.1.0.0: Installation and User Guide\n\n', ...
                    'I. Installation Steps:\n', ...
                    '   a. Download the file PGAz v.1.0.0 and save it to the MATLAB program folder on your computer.\n', ...
                    '   b. Open MATLAB and set the Current Folder to the location of PGAz v.1.0.0.\n', ...
                    '   c. Start the program by typing the command initpgaz_gui in the Command Window.\n\n', ...
                    'II. Operation Steps:\n', ...
                    '   a. Start by typing the command initpgaz_gui in the Command Window in MATLAB.\n', ...
                    '   b. Import a file by clicking the Open Data File button or using the shortcut Ctrl+D.\n', ...
                    '   c. Configure the basic parameters and select a method for Power Flow analysis by clicking the Settings button or using the shortcut Ctrl+G.\n', ...
                    '   d. Run the Power Flow analysis by pressing the Power Flow button.\n', ...
                    '   e. View the results in the Static Report window by clicking the Static Report button or using the shortcut Ctrl+V.\n', ...
                    '   f. Export the report by pressing the Export button in the Static Report window or using the shortcut Ctrl+E.\n']);

    % Create a message box to display the information
    msgbox(info, 'PGAz User Guide', 'help');
end


function handletossaporn()
% Open the default email application with the recipient's email
    email = 'tossaporn.su@kmitl.ac.th';
    subject = 'Feedback';
    body = 'Dear Tossaporn,\n\n';
    web(['mailto:' email '?subject=' subject '&body=' body], '-browser');
end
function handlesorasak()
% Open the default email application with the recipient's email
    email = '64010879@kmitl.ac.th';
    subject = 'Feedback';
    body = 'Dear Sorasak,\n\n';
    web(['mailto:' email '?subject=' subject '&body=' body], '-browser');
end

